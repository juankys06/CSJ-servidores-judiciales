/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package co.com.csj.model.impl;

import co.com.csj.model.alerta;
import co.com.csj.model.alertaModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the alerta service. Represents a row in the &quot;SJ_alertas&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link co.com.csj.model.alertaModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link alertaImpl}.
 * </p>
 *
 * @author villartech
 * @see alertaImpl
 * @see co.com.csj.model.alerta
 * @see co.com.csj.model.alertaModel
 * @generated
 */
public class alertaModelImpl extends BaseModelImpl<alerta>
	implements alertaModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a alerta model instance should use the {@link co.com.csj.model.alerta} interface instead.
	 */
	public static final String TABLE_NAME = "SJ_alertas";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.VARCHAR },
			{ "asunto", Types.VARCHAR },
			{ "mensaje", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table SJ_alertas (id VARCHAR(75) not null primary key,asunto VARCHAR(75) null,mensaje VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table SJ_alertas";
	public static final String DATA_SOURCE = "base_despachos";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.co.com.csj.model.alerta"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.co.com.csj.model.alerta"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.co.com.csj.model.alerta"));

	public alertaModelImpl() {
	}

	public String getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(String primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	public Class<?> getModelClass() {
		return alerta.class;
	}

	public String getModelClassName() {
		return alerta.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("asunto", getAsunto());
		attributes.put("mensaje", getMensaje());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String id = (String)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String asunto = (String)attributes.get("asunto");

		if (asunto != null) {
			setAsunto(asunto);
		}

		String mensaje = (String)attributes.get("mensaje");

		if (mensaje != null) {
			setMensaje(mensaje);
		}
	}

	public String getId() {
		if (_id == null) {
			return StringPool.BLANK;
		}
		else {
			return _id;
		}
	}

	public void setId(String id) {
		_id = id;
	}

	public String getAsunto() {
		if (_asunto == null) {
			return StringPool.BLANK;
		}
		else {
			return _asunto;
		}
	}

	public void setAsunto(String asunto) {
		_asunto = asunto;
	}

	public String getMensaje() {
		if (_mensaje == null) {
			return StringPool.BLANK;
		}
		else {
			return _mensaje;
		}
	}

	public void setMensaje(String mensaje) {
		_mensaje = mensaje;
	}

	@Override
	public alerta toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (alerta)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		alertaImpl alertaImpl = new alertaImpl();

		alertaImpl.setId(getId());
		alertaImpl.setAsunto(getAsunto());
		alertaImpl.setMensaje(getMensaje());

		alertaImpl.resetOriginalValues();

		return alertaImpl;
	}

	public int compareTo(alerta alerta) {
		String primaryKey = alerta.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		alerta alerta = null;

		try {
			alerta = (alerta)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		String primaryKey = alerta.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<alerta> toCacheModel() {
		alertaCacheModel alertaCacheModel = new alertaCacheModel();

		alertaCacheModel.id = getId();

		String id = alertaCacheModel.id;

		if ((id != null) && (id.length() == 0)) {
			alertaCacheModel.id = null;
		}

		alertaCacheModel.asunto = getAsunto();

		String asunto = alertaCacheModel.asunto;

		if ((asunto != null) && (asunto.length() == 0)) {
			alertaCacheModel.asunto = null;
		}

		alertaCacheModel.mensaje = getMensaje();

		String mensaje = alertaCacheModel.mensaje;

		if ((mensaje != null) && (mensaje.length() == 0)) {
			alertaCacheModel.mensaje = null;
		}

		return alertaCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", asunto=");
		sb.append(getAsunto());
		sb.append(", mensaje=");
		sb.append(getMensaje());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("co.com.csj.model.alerta");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>asunto</column-name><column-value><![CDATA[");
		sb.append(getAsunto());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mensaje</column-name><column-value><![CDATA[");
		sb.append(getMensaje());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = alerta.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			alerta.class
		};
	private String _id;
	private String _asunto;
	private String _mensaje;
	private alerta _escapedModelProxy;
}